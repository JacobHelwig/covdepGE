// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cov_vsvb_c
Rcpp::List cov_vsvb_c(const arma::colvec& y, const arma::mat& D, const arma::mat& X_mat, const arma::mat& mu_mat, const arma::mat& alpha_mat, double sigmasq, double sigmabeta_sq, double pi_est, double tolerance, int max_iter, double upper_limit);
RcppExport SEXP _covdepGE_cov_vsvb_c(SEXP ySEXP, SEXP DSEXP, SEXP X_matSEXP, SEXP mu_matSEXP, SEXP alpha_matSEXP, SEXP sigmasqSEXP, SEXP sigmabeta_sqSEXP, SEXP pi_estSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_mat(mu_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_mat(alpha_matSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< double >::type sigmabeta_sq(sigmabeta_sqSEXP);
    Rcpp::traits::input_parameter< double >::type pi_est(pi_estSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type upper_limit(upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_vsvb_c(y, D, X_mat, mu_mat, alpha_mat, sigmasq, sigmabeta_sq, pi_est, tolerance, max_iter, upper_limit));
    return rcpp_result_gen;
END_RCPP
}
// sigma_loop_c
Rcpp::List sigma_loop_c(const arma::colvec& y, const arma::mat& D, const arma::mat& X_mat, const arma::mat& mu_mat, const arma::mat& alpha_mat, double sigmasq, const arma::colvec& sigmabeta_sq_vec, const arma::colvec& pi_vec, double tolerance, int max_iter, double upper_limit);
RcppExport SEXP _covdepGE_sigma_loop_c(SEXP ySEXP, SEXP DSEXP, SEXP X_matSEXP, SEXP mu_matSEXP, SEXP alpha_matSEXP, SEXP sigmasqSEXP, SEXP sigmabeta_sq_vecSEXP, SEXP pi_vecSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_mat(mu_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_mat(alpha_matSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type sigmabeta_sq_vec(sigmabeta_sq_vecSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type pi_vec(pi_vecSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type upper_limit(upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_loop_c(y, D, X_mat, mu_mat, alpha_mat, sigmasq, sigmabeta_sq_vec, pi_vec, tolerance, max_iter, upper_limit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_covdepGE_cov_vsvb_c", (DL_FUNC) &_covdepGE_cov_vsvb_c, 11},
    {"_covdepGE_sigma_loop_c", (DL_FUNC) &_covdepGE_sigma_loop_c, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_covdepGE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
