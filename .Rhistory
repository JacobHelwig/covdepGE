library(covdepGE)
set.seed(2)
# gen the data
cont <- generate_continuous()
X <- cont$data
# package
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data_gen.R")
set.seed(2)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
out
out1
plot(out1)
set.seed(1)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
out1
plot(out1)
set.seed(3)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
out1
plot(out1)
out2 <- covdepGE(X, Z, hp_method = "grid_search")
out2
plot(out2)
out3 <- covdepGE(X, Z, hp_method = "model_average")
out3
plot(out3)
out <- covdepGE(X, Z, parallel = T)
out
plot(out)
out <- covdepGE(X, Z, parallel = T, num_workers = 5)
out
library(doParallel)
out <- covdepGE(X, Z, parallel = T, num_workers = -1)
doParallel::registerDoParallel(5)
out <- covdepGE(X, Z, parallel = T, num_workers = -1)
out <- covdepGE(X, Z, parallel = T)
library(covdepGE)
# package
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data_gen.R")
set.seed(3)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# run in parallel
library(covdepGE)
out <- covdepGE(X, Z, parallel = T)
out <- covdepGE(X, Z, parallel = T, num_workers = 5)
doParallel::registerDoParallel(5)
out <- covdepGE(X, Z, parallel = T)
doParallel::stopImplicitCluster()
out
plot(out)
out
out$graphs$graphs
names(out$graphs$graphs)
length(out$graphs$graphs)
length(out$graphs$graphs[0])
length(out$graphs$graphs[1])
out$graphs$graphs[1]
out$graphs$graphs[[1]]
dim(out$graphs$graphs[[1]])
names(out$graphs)
names(out$graphs$unique_graphs)
out$graphs$unique_graphs$graph1
out$graphs$inclusion_probs_sym
len(out$graphs$inclusion_probs_sym)
length(out$graphs$inclusion_probs_sym)
length(out$graphs$inclusion_probs_asym)
length(out$graphs)
out$variational_params
length(out$variational_params)
names(out$variational_params)
out$variational_params$alpha
dim(out$variational_params$alpha)
length(out$variational_params$alpha)
length(out$variational_params)
names(out$variational_params)
names(out)
names(out$hyperparameters)
out$hyperparameters$variable1
names(out$hyperparameters$variable1)
out$hyperparameters$variable1$grid
out$hyperparameters$variable1$grid_sz
length(out$hyperparameters$variable1$grid)
nrow(out$hyperparameters$variable1$grid)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/covdepGE_main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/covdepGE_main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/covdepGE_main.R")
#'
#' 8. `bandwidths`: vector of length \eqn{n}; individual-specific bandwidths
#'
#' 9. `arguments`: vector; argument values passed to the current call to
#' `covdepGE`
#'
#'
#'
#'
#' @examples
covdepGE <- function(data, Z, hp_method = "hybrid", ssq = NULL, sbsq = NULL,
pip = NULL, nssq = 5, nsbsq = 5, npip = 5, ssq_mult = 1.5,
ssq_lower = 1e-5, snr_upper = 25, sbsq_lower = 1e-5,
pip_lower = 1e-5, tau = NULL, norm = 2, center_data = T,
scale_Z = T, elbo_tol = 1e-5, alpha_tol = 1e-5,
max_iter = 100, edge_threshold = 0.5, sym_method = "mean",
parallel = F, num_workers = NULL, prog_bar = T){
start_time <- Sys.time()
# run compatibility checks
# covdepGE_checks(data, Z, tau, kde, alpha, mu, ssq, sbsq, pi_vec, norm, scale, tolerance, max_iter, edge_threshold,
#                 sym_method, parallel, num_workers, stop_cluster, warnings)
# ensure that data_mat and Z are matrices
data <- as.matrix(data)
Z <- as.matrix(Z)
# get sample size and number of parameters
n <- nrow(data)
p <- ncol(data) - 1
# if the covariates should be centered and scaled, do so ([ , ] for attributes)
if (scale_Z) Z <- matrix(scale(Z)[ , ], n)
# if the data should be centered, do so
if (center_data) data <- matrix(scale(data, T, F)[ , ], n)
# get weights
D <- get_weights(Z, norm, tau)
bandwidths <- D$bandwidths
D <- D$D
# list for the weights and bandwidths
weights = list(weights = D, bandwidths = bandwidths)
# main loop over the predictors
# check if CAVIs are to be parallelized
if (parallel){
# check to see if parallel backend has been registered
registered <- tryCatch(
{
# return true if parallel backend is registered with more than 1 worker
foreach::`%dopar%`(foreach::foreach(NULL), NULL)
foreach::getDoParRegistered()
},
# return false if error
error = function(msg) F,
# return false if warning
warning = function(msg) F)
if (registered){
message(paste("Detected", foreach::getDoParWorkers(), "workers"))
}else{
# otherwise, register parallel backend
# if num_workers has not been provided, get the number of workers
if (is.null(num_workers)){
num_workers <- floor(parallel::detectCores() / 2)
}
# perform registration
warning(paste(
"No registered workers detected; registering doParallel with",
num_workers, "workers"))
doParallel::registerDoParallel(cores = num_workers)
}
# attempt to execute the variational update in parallel
res <- tryCatch(
{
foreach::`%dopar%`(
foreach::foreach(resp_index = 1:(p + 1), .packages = "covdepGE"),
{
# Set variable number `resp_index` as the response
y <- data[, resp_index]
# Set the remaining p variables as predictors
X <- data[, -resp_index, drop = F]
# perform the grid search and final CAVI; save the results to res
cavi_search(X, Z, D, y, hp_method, ssq, sbsq, pip, nssq, nsbsq,
npip, ssq_mult, ssq_lower, snr_upper, sbsq_lower,
pip_lower, elbo_tol, alpha_tol, max_iter, resp_index)
}
)
},
# if parallel execution did not finish successfully, display an error
error = function(msg) stop(paste(
"Parallel execution failed; error message: ", msg))
)
# shut down the cluster
doParallel::stopImplicitCluster()
}else{
# otherwise, CAVI will be executed sequentially
# instantiate the progress bar
if (prog_bar) pb <- utils::txtProgressBar(0, p + 1, style = 3)
# list to store each of the results from cavi_search
res <- vector("list", p + 1)
for (resp_index in 1:(p + 1)) {
# Set variable number `resp_index` as the response
y <- data[, resp_index]
# Set the remaining p variables as predictors
X <- data[, -resp_index, drop = F]
# perform the grid search and final CAVI; save the results to res
res[[resp_index]] <- cavi_search(X, Z, D, y, hp_method, ssq, sbsq, pip,
nssq, nsbsq, npip, ssq_mult, ssq_lower,
snr_upper, sbsq_lower, pip_lower,
elbo_tol, alpha_tol, max_iter,
resp_index)
# update the progress bar
if (prog_bar) utils::setTxtProgressBar(pb, resp_index)
}
# close the progress bar
if (prog_bar) close(pb)
}
# gather the variational parameter matrices, hyperparameter details, and
# final elbo for each variable into lists/ vectors
alpha_matrices <- lapply(res, `[[`, "alpha_matrix")
mu_matrices <- lapply(res, `[[`, "mu_matrix")
ssqv_matrices <- lapply(res, `[[`, "ssqv_matrix")
hp <- lapply(res, `[[`, "hyperparameters")
elbo <- sapply(res, `[[`, "elbo")
# name elements of these lists by variable
names(hp) <- names(alpha_matrices) <- names(mu_matrices) <- names(
ssqv_matrices) <- paste0("variable", 1:(p + 1))
# list for the variational parameters
var_mats <- list(alpha = alpha_matrices, mu = mu_matrices,
ssq_var = ssqv_matrices)
# calculate the total ELBO
total_elbo <- sum(elbo)
# get the grid size; if hp_method is "hybrid", include the number of pip
grid_sz <- nrow(hp[[1]]$grid) * ifelse(hp_method == "hybrid",
nrow(hp[[1]]$final), 1)
# Graph post-processing
# transform p + 1 n by n matrices to n p + 1 by p + 1 matrices using
# alpha_matrices
# the j, k entry in the l-th matrix is the probability of inclusion of an edge
# between the j, k variables for the l-th individual
incl_probs <- replicate(n, matrix(0, p + 1, p + 1), simplify = F)
# iterate over the p matrices
for (j in 1:(p + 1)){
# fix the j-th alpha matrix
alpha_mat_j <- alpha_matrices[[j]]
# iterate over the rows of alpha_mat_j
for (l in 1:n){
# the j-th row of the l-th individual's graph is the l-th row of
# alpha_mat_j with a 0 in the j-th position
incl_probs[[l]][j, -j] <- alpha_mat_j[l,]
}
}
# save the asymmetric matrices
incl_probs_asym <- incl_probs
# symmetrize the inclusion matrices according to the symmetrization method
if (sym_method == "mean"){
# take the mean of (i,j), (j,i) entries to symmetrize
incl_probs <- lapply(incl_probs, function(mat) (mat + t(mat)) / 2)
}else if (sym_method == "min"){
# take the min of (i,j), (j,i) entries to symmetrize
incl_probs <- lapply(incl_probs, function(mat) pmin(mat, t(mat)))
}else{
# take the max of (i,j), (j,i) entries to symmetrize
incl_probs <- lapply(incl_probs, function(mat) pmax(mat, t(mat)))
}
# using the symmetrized graphs, if the probability of an edge is greater than
# edge_threshold, denote an edge by 1; otherwise, 0
graphs <- lapply(incl_probs, function(mat) (mat > edge_threshold) * 1)
# find the unique graphs
unique_graphs <- unique(graphs)
# find the individuals corresponding to each of the unique graphs
indv_graphs <- lapply(unique_graphs, function(unique_graph)
which(sapply(graphs, function(indv_graph) identical(indv_graph, unique_graph))))
# for each unique graph, create a summary of the individuals corresponding to
# that graph
indv_graphs_sum <- lapply(indv_graphs, function(indv_graph) paste0(sapply(
split(sort(indv_graph), cumsum(c(1, diff(sort(indv_graph)) != 1))), function(
idx_seq) ifelse(length(idx_seq) > 2, paste0(min(idx_seq), ",...,", max(
idx_seq)), paste0(idx_seq, collapse = ","))), collapse = ","))
# create a nested list where the j-th inner list has three values; the j-th
# unique graph, the individuals corresponding to that graph, and a summary of
# the individuals corresponding to that graph
unique_graphs <- lapply(1:length(unique_graphs), function(gr_idx)
list(graph = unique_graphs[[gr_idx]], individuals = indv_graphs[[gr_idx]],
individuals_summary = indv_graphs_sum[[gr_idx]]))
names(unique_graphs) <- paste0("graph", 1:length(unique_graphs))
# create a list for graphs and inclusion probabilties
graphs = list(graphs = graphs, unique_graphs = unique_graphs,
inclusion_probs_sym = incl_probs,
inclusion_probs_asym = incl_probs_asym)
# create a list to return the scalar function arguments
args <- NULL
# args <- list(hp_method = hp_method, nssq = nssq, nsbsq = nsbsq, npip = npip, ssq_upper_mult = ssq_upper_mult,
#              ssq_lower = ssq_lower, sbsq_lower = sbsq_lower,
#              pip_lower = pip_lower, tau = tau, kde = kde, norm = norm,
#              center_data = center_data, scale_Z = scale_Z,
#              elbo_tol = elbo_tol, alpha_tol = alpha_tol, max_iter = max_iter,
#              edge_threshold = edge_threshold, sym_method = sym_method,
#              parallel = parallel, num_workers = num_workers,
#              prog_bar = prog_bar)
# create a list for model details
model_details <- list(elapsed = NA, n = n, p = p, ELBO = total_elbo,
num_unique = length(unique_graphs), grid_size = grid_sz,
args = args)
# record the elapsed time and add it to the model details
model_details[["elapsed"]] <- Sys.time() - start_time
# define the list of return values
ret <- list(graphs = graphs, variational_params = var_mats,
hyperparameters = hp, model_details = model_details,
weights = weights)
# define the class of the return values
class(ret) <- c("covdepGE", "list")
return(ret)
}
## -----------------------------------------------------------------------------
#' @title print.covdepGE
#' @export
#' @rdname covdepGE
## -----------------------------DESCRIPTION-------------------------------------
## S3 method for printing an object of class `covdepGE`
## -----------------------------ARGUMENTS---------------------------------------
#' @param x object of class covdepGE; the return of the covdepGE function
#' @param ... additional arguments will be ignored
## -----------------------------------------------------------------------------
print.covdepGE <- function(x, ...){
cat("                      Covariate Dependent Graphical Model\n\n")
spc <- 80
with(x$model_details,
{
# print ELBO and number of unique graphs
elbo_str <- paste0("Model ELBO: ", round(ELBO, 2))
cat(sprintf(paste0("%-s%", spc - nchar(elbo_str), "s"), elbo_str,
paste0("Unique conditional dependence structures: ",
num_unique, "\n")))
# print data dimensions and the grid size
data_dim <- paste0("n: ", n, ", variables: ", p + 1)
cat(sprintf(paste0("%-s%", spc - nchar(data_dim), "s"), data_dim,
paste0("Hyperparameter grid size: ", grid_size,
" points\n")))
# print time to fit
time_units <- attr(elapsed, "units")
duration <- as.numeric(elapsed)
cat("Model fit completed in", round(duration, 3), time_units, "\n")
}
)
}
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/covdepGE_main.R")
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
# src the scripts
if ("covdepGE" %in% .packages()) detach("package:covdepGE", unload = TRUE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/covdepGE_main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi_search.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/weights.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/checks.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/gg_covdepGE.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/covdepGE_R.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data_gen.R")
Rcpp::sourceCpp("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/src/covdepGE_c.cpp")
set.seed(3)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
out1
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
# package
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data_gen.R")
# src the scripts
if ("covdepGE" %in% .packages()) detach("package:covdepGE", unload = TRUE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/weights.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/plots.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
Rcpp::sourceCpp("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/src/covdepGE_c.cpp")
set.seed(1)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
out1
out1$hyperparameters
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
# src the scripts
if ("covdepGE" %in% .packages()) detach("package:covdepGE", unload = TRUE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/weights.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/plots.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
Rcpp::sourceCpp("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/src/covdepGE_c.cpp")
set.seed(1)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
out1
plot(out1)
out1$hyperparameters
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
# src the scripts
if ("covdepGE" %in% .packages()) detach("package:covdepGE", unload = TRUE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/weights.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/plots.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
Rcpp::sourceCpp("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/src/covdepGE_c.cpp")
set.seed(1)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
out1
out1$hyperparameters
debug(covdepGE)
# package
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
# src the scripts
if ("covdepGE" %in% .packages()) detach("package:covdepGE", unload = TRUE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/weights.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/plots.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
Rcpp::sourceCpp("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/src/covdepGE_c.cpp")
set.seed(1)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
debug(cavi)
# vanilla
out1 <- covdepGE(X, Z) # hybrid
hp
unique(hp)
hp[1]
hp[1,]
rbind.data.frame(hp, hp[1,])
unique(rbind.data.frame(hp, hp[1,]))
out_grid$conv_iter
out$conv_iter
out$conv_iter
out$elbo
sum(elbo_l)
# vanilla
out1 <- covdepGE(X, Z) # hybrid
hp
names(hp)
Rcpp::sourceCpp("src/covdepGE_c.cpp")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi.R")
# package
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
# src the scripts
if ("covdepGE" %in% .packages()) detach("package:covdepGE", unload = TRUE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/weights.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/plots.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
Rcpp::sourceCpp("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/src/covdepGE_c.cpp")
set.seed(1)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
Rcpp::sourceCpp("src/covdepGE_c.cpp")
# package
library(covdepGE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
# src the scripts
if ("covdepGE" %in% .packages()) detach("package:covdepGE", unload = TRUE)
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/main.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/cavi.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/weights.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/plots.R")
source("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/R/data.R")
Rcpp::sourceCpp("~/TAMU/Research/An approximate Bayesian approach to covariate dependent/covdepGE/src/covdepGE_c.cpp")
set.seed(1)
# gen the data
cont <- generate_continuous()
X <- cont$data
Z <- cont$covts
# vanilla
out1 <- covdepGE(X, Z) # hybrid
debug(cavi)
# vanilla
out1 <- covdepGE(X, Z) # hybrid
