% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gg_covdepGE.R
\name{plot.covdepGE}
\alias{plot.covdepGE}
\title{plot.covdepGE}
\usage{
\method{plot}{covdepGE}(x, graph_colors = NULL, ...)
}
\arguments{
\item{x}{object of class covdepGE; return of \code{covdepGE} function}

\item{graph_colors}{vector of length g; g is the number of unique graphs
from out. The v-th element is the color for the v-th unique graph. Default is
NULL, which results in
\code{graph_colors <- rep("#500000", length(out$unique_graphs))}}

\item{...}{additional arguments will be ignored}
}
\value{
Returns list of \code{ggplot2} visualizations of unique graph adjacency
matrices
}
\description{
Given the return value of covdepGE function, create a list of
visualizations of the adjacency matrix for each of the unique graphs
}
\examples{
set.seed(1)
n <- 100
p <- 4

# generate the extraneous covariate
Z_neg <- sort(runif(n / 2) * -1)
Z_pos <- sort(runif(n / 2))
Z <- c(Z_neg, Z_pos)
summary(Z)

# create true covariance structure for 2 groups: positive Z and negative Z
true_graph_pos <- true_graph_neg <- matrix(0, p + 1, p + 1)
true_graph_pos[1, 2] <- true_graph_pos[2, 1] <- 1
true_graph_neg[1, 3] <- true_graph_neg[3, 1] <- 1

# visualize the true covariance structures
(gg_adjMat(true_graph_neg) +
    ggplot2::ggtitle("True graph for individuals with negative Z"))
(gg_adjMat(true_graph_pos, color1 = "steelblue") +
    ggplot2::ggtitle("True graph for individuals with positive Z"))

# generate the covariance matrices as a function of Z
sigma_mats_neg <- lapply(Z_neg, function(z) z * true_graph_neg + diag(p + 1))
sigma_mats_pos <- lapply(Z_pos, function(z) z * true_graph_pos + diag(p + 1))
sigma_mats <- c(sigma_mats_neg, sigma_mats_pos)

# generate the data using the covariance matrices
data_mat <- t(sapply(sigma_mats, MASS::mvrnorm, n = 1, mu = rep(0, p + 1)))

# visualize the sample correlation
gg_adjMat(abs(cor(data_mat[1:(n / 2), ])) - diag(p + 1))
gg_adjMat(abs(cor(data_mat[(n / 2 + 1):n, ])) - diag(p + 1),
          color1 = "dodgerblue")

# estimate the covariance structure
out <- covdepGE(data_mat, Z)

# analyze results
plot(out)

gg_inclusionCurve(out, 1, 2)
gg_inclusionCurve(out, 1, 3, point_color = "dodgerblue")
}
